
def is_safe(board, row, col, N):
    
    for i in range(row):
        if board[i][col] == 1:
            return False

    
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    
    for i, j in zip(range(row, -1, -1), range(col, N)):
        if board[i][j] == 1:
            return False

    return True


def solve_nqueens(board, row, N, solutions):
    
    if row >= N:
        solutions.append([row[:] for row in board])  
        return

    
    for col in range(N):
        if is_safe(board, row, col, N):
            
            board[row][col] = 1

            
            solve_nqueens(board, row + 1, N, solutions)

            
            board[row][col] = 0


def print_board(board, N):
    for row in board:
        print(" ".join("Q" if col == 1 else "." for col in row))
    print("\n")  


def n_queens():
    N = int(input("Enter the value of N for the N-Queens problem: "))
    
    
    board = [[0 for _ in range(N)] for _ in range(N)]
    
    
    solutions = []

    
    solve_nqueens(board, 0, N, solutions)

  
    if solutions:
        print(f"\nTotal solutions for {N}-Queens problem: {len(solutions)}")
        for i, solution in enumerate(solutions):
            print(f"\nSolution {i + 1}:")
            print_board(solution, N)
    else:
        print(f"No solution exists for {N}-Queens problem.")


n_queens()
 
