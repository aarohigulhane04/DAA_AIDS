#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

// Dynamic Programming approach
int knapsackDP(int W, vector<int>& wt, vector<int>& val, int n) {
    vector<vector<int>> dp(n + 1, vector<int>(W + 1, 0));
    for (int i = 1; i <= n; i++) {
        for (int w = 1; w <= W; w++) {
            if (wt[i - 1] <= w)
                dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - wt[i - 1]] + val[i - 1]);
            else
                dp[i][w] = dp[i - 1][w];
        }
    }
    return dp[n][W];
}

// Backtracking approach
int knapsackBacktrack(int W, vector<int>& wt, vector<int>& val, int n, int idx, int curVal, int curWeight) {
    if (idx == n || curWeight == W)
        return curVal;
    if (curWeight + wt[idx] > W)
        return knapsackBacktrack(W, wt, val, n, idx + 1, curVal, curWeight);
    int include = knapsackBacktrack(W, wt, val, n, idx + 1, curVal + val[idx], curWeight + wt[idx]);
    int exclude = knapsackBacktrack(W, wt, val, n, idx + 1, curVal, curWeight);
    return max(include, exclude);
}

// Node structure for Branch and Bound
struct Node {
    int level, profit, weight;
    float bound;
};

// Function to calculate the bound for Branch and Bound
float bound(Node u, int n, int W, vector<int>& wt, vector<int>& val) {
    if (u.weight >= W)
        return 0;
    float profit_bound = u.profit;
    int j = u.level + 1;
    int totweight = u.weight;
    while ((j < n) && (totweight + wt[j] <= W)) {
        totweight += wt[j];
        profit_bound += val[j];
        j++;
    }
    if (j < n)
        profit_bound += (W - totweight) * val[j] / (float)wt[j];
    return profit_bound;
}

// Branch and Bound approach
int knapsackBranchBound(int W, vector<int>& wt, vector<int>& val, int n) {
    vector<pair<float, pair<int, int>>> items;
    for (int i = 0; i < n; i++)
        items.push_back({(float)val[i] / wt[i], {wt[i], val[i]}});
    sort(items.rbegin(), items.rend());
    for (int i = 0; i < n; i++) {
        wt[i] = items[i].second.first;
        val[i] = items[i].second.second;
    }
    queue<Node> Q;
    Node u, v;
    u.level = -1;
    u.profit = u.weight = 0;
    Q.push(u);
    int maxProfit = 0;
    while (!Q.empty()) {
        u = Q.front();
        Q.pop();
        if (u.level == n - 1)
            continue;
        v.level = u.level + 1;
        v.weight = u.weight + wt[v.level];
        v.profit = u.profit + val[v.level];
        if (v.weight <= W && v.profit > maxProfit)
            maxProfit = v.profit;
        v.bound = bound(v, n, W, wt, val);
        if (v.bound > maxProfit)
            Q.push(v);
        v.weight = u.weight;
        v.profit = u.profit;
        v.bound = bound(v, n, W, wt, val);
        if (v.bound > maxProfit)
            Q.push(v);
    }
    return maxProfit;
}

// Main function
int main() {
    int n = 4;
    vector<int> val = {60, 100, 120, 90};
    vector<int> wt = {10, 20, 30, 40};
    int W = 50;

    cout << "Knapsack using Dynamic Programming: " << knapsackDP(W, wt, val, n) << endl;
    cout << "Knapsack using Backtracking: " << knapsackBacktrack(W, wt, val, n, 0, 0, 0) << endl;
    cout << "Knapsack using Branch and Bound: " << knapsackBranchBound(W, wt, val, n) << endl;

    return 0;
}
