def knapsack_DP(weights,values,capacity):
    n=len(values)
    dp=[[0 for _ in range(capacity+1)] for _ in range(n+1)]

    for i in range(1,n+1):
        for w in range(1,capacity+1):
            if weights[i-1]<=w:
                dp[i][w]=max(dp[i-1][w],dp[i-1][w-weights[i-1]]+values[i-1])
            else :
                dp[i][w]=dp[i-1][w]
   
    selected_items=[]
    current_capacity=capacity
    for i in range(n,0,-1):
        if dp[i][current_capacity] != dp[i-1][current_capacity]:
            selected_items.append((weights[i-1],values[i-1]))
            
            current_capacity-=weights[i-1]
    

    return dp[n][capacity],selected_items


n=int(input("Enter total number of items :"))
weights=list(map(int,input(f"Enter weight of {n} items :").split()))
values=list(map(int,input(f"Enter values of {n} items :").split()))
capacity=int(input(f"enter maximum capacity of bag :"))

res,selected_items=knapsack_DP(weights,values,capacity)
print(f"Maximum profit obtaind by DP : {res}")

print("Selected items weight and values :")
for weight, value in selected_items:
    print(f"Weight: {weight}, Value: {value}")
