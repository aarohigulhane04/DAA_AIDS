#include <iostream>
#include <bits/stdc++.h>
using namespace std;

typedef struct {
    int profit;
    int weight;
    float ratio;
} Item;

// Input function to gather item data
void data(Item items[], int &n) {
    cout << "Enter the number of items: ";
    cin >> n;
    cout << endl;

    for (int i = 0; i < n; i++) {
        cout << "Enter the weight of item " << i + 1 << ": ";
        cin >> items[i].weight;
        cout << "Enter the profit of item " << i + 1 << ": ";
        cin >> items[i].profit;
        items[i].ratio = (float)items[i].profit / items[i].weight;  // Calculate profit-to-weight ratio
        cout << endl;
    }
}

// Display function to print item weights and profits
void display(Item items[], int &n) {
    cout << "\nWeights: ";
    for (int i = 0; i < n; i++) {
        cout << items[i].weight << "\t";
    }

    cout << "\nProfits: ";
    for (int i = 0; i < n; i++) {
        cout << items[i].profit << "\t";
    }
    cout << endl;
}

// Comparator function for sorting by ratio (descending order)
bool compare(Item i1, Item i2) {
    return (i1.ratio > i2.ratio);
}

// Knapsack function to calculate the maximum profit
float knapsack(Item items[], int n, int W) {
    float totalWeight = 0;
    float totalProfit = 0;

    // Sort items by ratio in descending order
    sort(items, items + n, compare);

    // Loop through items and fill the knapsack
    for (int i = 0; i < n; i++) {
        if (totalWeight + items[i].weight <= W) {
            // Take the whole item
            totalProfit += items[i].profit;
            totalWeight += items[i].weight;
        } else {
            // Take a fraction of the item
            int remainingWeight = W - totalWeight;
            totalProfit += (remainingWeight * items[i].ratio);
            totalWeight += remainingWeight;
            break;  // Knapsack is full
        }
    }

    cout << "\nTotal weight in the knapsack: " << totalWeight << endl;
    return totalProfit;
}

int main() {
    int n, W;
    Item items[100];  // Array to hold items

    // Input items
    data(items, n);

    // Display entered data
    cout << "\nEntered data:";
    display(items, n);

    // Input the maximum capacity of the knapsack
    cout << "\nEnter the maximum weight of the knapsack: ";
    cin >> W;

    // Calculate the maximum profit
    float maxProfit = knapsack(items, n, W);

    // Output the result
    cout << "\nMaximum profit for weight " << W << " is: " << maxProfit << endl;

    return 0;
}
